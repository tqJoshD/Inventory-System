#include <iostream>
#include <vector>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <stdexcept>

using namespace std;

class Product {
public:
    string productname;
    string producttype;
    string productsize;
    int productprize;
    int productquantity;
    int productnumber;

    static int lastProductNumber;

    Product() {
        productnumber = ++lastProductNumber;
    }

    virtual ~Product() {}

    virtual void setProductsAttribute() {
        cout << "\nEnter the name of the Product: ";
        cin >> ws; getline(cin, productname);
        cout << "Enter the type of Product: ";
        getline(cin, producttype);
        cout << "Enter the product's size: ";
        getline(cin, productsize);

        while (true) {
            try {
                cout << "Enter the product's price: ";
                string priceStr;
                getline(cin, priceStr);
                productprize = stoi(priceStr);
                if (productprize < 0) throw invalid_argument("Price must be non-negative.");
                break;
            } catch (const exception& e) {
                cout << "Invalid input for price. " << e.what() << " Try again.\n";
            }
        }

        while (true) {
            try {
                cout << "Enter the available stock: ";
                string quantityStr;
                getline(cin, quantityStr);
                productquantity = stoi(quantityStr);
                if (productquantity < 0) throw invalid_argument("Quantity must be non-negative.");
                break;
            } catch (const exception& e) {
                cout << "Invalid input for quantity. " << e.what() << " Try again.\n";
            }
        }
    }

    virtual void displayStock() const {
        cout << "\nProduct Name: " << productname
             << "\nProduct Number: " << productnumber
             << "\nAvailable Stocks: " << productquantity << endl;
    }

    virtual string getType() const {
        return "Generic Product";
    }

    int getProductNumber() const {
        return productnumber;
    }

    int getProductValue() const {
        return productprize * productquantity;
    }

    friend ostream& operator<<(ostream& os, const Product& product);
    friend istream& operator>>(istream& is, Product& product);
};

int Product::lastProductNumber = 0;

class Furniture : public Product {
public:
    string material;

    void setProductsAttribute() override {
        Product::setProductsAttribute();
        producttype = "Furniture";
        cout << "Enter the material: ";
        cin >> ws; getline(cin, material);
    }

    void displayStock() const override {
        Product::displayStock();
        cout << "Material: " << material << endl;
    }

    string getType() const override {
        return "Furniture";
    }
};

class Tool : public Product {
public:
    string usage;

    void setProductsAttribute() override {
        Product::setProductsAttribute();
        producttype = "Tool";
        cout << "Enter the tool's usage: ";
        cin >> ws; getline(cin, usage);
    }

    void displayStock() const override {
        Product::displayStock();
        cout << "Usage: " << usage << endl;
    }

    string getType() const override {
        return "Tool";
    }
};

vector<Product*> inventory;
vector<Product*> deletedInventory;

void AddNewProduct() {
    int typeChoice;
    cout << "Select product type: 1 - Furniture, 2 - Tool, 3 - Other: ";
    cin >> typeChoice;

    Product* product = nullptr;

    switch (typeChoice) {
        case 1: product = new Furniture(); break;
        case 2: product = new Tool(); break;
        case 3: product = new Product(); break;
        default:
            cout << "Invalid choice. Adding as generic product.\n";
            product = new Product(); break;
    }

    product->setProductsAttribute();
    inventory.push_back(product);
    cout << "Product added successfully. Product Number: " << product->getProductNumber() << "\n";
}

void SearchStock() {
    int choice;
    cout << "Search by: 1 - Product Number | 2 - Product Name: ";
    cin >> choice;

    if (choice == 1) {
        int num;
        cout << "Enter product number: ";
        cin >> num;
        for (auto* product : inventory) {
            if (product->getProductNumber() == num) {
                cout << *product << endl;
                return;
            }
        }
    } else if (choice == 2) {
        string name;
        cout << "Enter product name: ";
        cin >> ws;
        getline(cin, name);
        for (auto* product : inventory) {
            if (product->productname == name) {
                cout << *product << endl;
                return;
            }
        }
    }
    cout << "Product not found.\n";
}

void UpdateStock() {
    int productnum;
    cout << "Enter product number to update: ";
    cin >> productnum;
    for (auto* product : inventory) {
        if (product->getProductNumber() == productnum) {
            product->displayStock();
            cout << "Enter new quantity: ";
            cin >> product->productquantity;
            cout << "Stock updated.\n";
            return;
        }
    }
    cout << "Product not found.\n";
}

void DisplayAllProduct() {
    if (inventory.empty()) {
        cout << "No products in inventory.\n";
        return;
    }
    cout << left << setw(5) << "No."
         << setw(20) << "Name"
         << setw(20) << "Type"
         << setw(12) << "Size"
         << setw(10) << "Price"
         << setw(10) << "Stock" << endl;
    cout << string(77, '-') << endl;
    for (auto* product : inventory) {
        cout << left << setw(5) << product->productnumber
             << setw(20) << product->productname
             << setw(20) << product->producttype
             << setw(12) << product->productsize
             << setw(10) << product->productprize
             << setw(10) << product->productquantity << endl;
    }
}

void CalculateInventoryValue() {
    int total = 0;
    for (auto* product : inventory) {
        total += product->getProductValue();
    }
    cout << "Total inventory value: " << total << "\n";
}

void DeleteProduct() {
    int productnum;
    cout << "Enter product number to delete: ";
    cin >> productnum;
    for (auto it = inventory.begin(); it != inventory.end(); ++it) {
        if ((*it)->getProductNumber() == productnum) {
            deletedInventory.push_back(*it);
            inventory.erase(it);
            cout << "Product deleted (can be restored).\n";
            return;
        }
    }
    cout << "Product not found.\n";
}

void DisplayDeletedProducts() {
    if (deletedInventory.empty()) {
        cout << "No deleted products.\n";
        return;
    }
    cout << "\n--- Deleted Products ---\n";
    cout << left << setw(5) << "No."
         << setw(20) << "Name"
         << setw(20) << "Type"
         << setw(12) << "Size"
         << setw(10) << "Price"
         << setw(10) << "Stock" << endl;
    cout << string(77, '-') << endl;
    for (auto* product : deletedInventory) {
        cout << left << setw(5) << product->productnumber
             << setw(20) << product->productname
             << setw(20) << product->producttype
             << setw(12) << product->productsize
             << setw(10) << product->productprize
             << setw(10) << product->productquantity << endl;
    }
}

void RestoreDeletedProduct() {
    int productnum;
    cout << "Enter product number to restore: ";
    cin >> productnum;
    for (auto it = deletedInventory.begin(); it != deletedInventory.end(); ++it) {
        if ((*it)->getProductNumber() == productnum) {
            inventory.push_back(*it);
            deletedInventory.erase(it);
            cout << "Product restored.\n";
            return;
        }
    }
    cout << "Product not found in deleted items.\n";
}

void saveInventoryToFile(const string& filename) {
    ofstream outFile(filename);
    if (!outFile) {
        cout << "Error opening file for writing!\n";
        return;
    }
    for (auto* product : inventory) {
        outFile << *product << "\n";
    }
    cout << "Inventory saved to file.\n";
}

void loadInventoryFromFile(const string& filename) {
    ifstream inFile(filename);
    if (!inFile) {
        cout << "No existing inventory file found.\n";
        return;
    }
    string line;
    while (getline(inFile, line)) {
        istringstream iss(line);
        Product* p = new Product();
        iss >> *p;
        if (p->getProductNumber() > Product::lastProductNumber)
            Product::lastProductNumber = p->getProductNumber();
        inventory.push_back(p);
    }
    cout << "Inventory loaded from file.\n";
}

void CleanUp() {
    for (auto* product : inventory) delete product;
    for (auto* product : deletedInventory) delete product;
    inventory.clear();
    deletedInventory.clear();
}

ostream& operator<<(ostream& os, const Product& product) {
    os << product.productnumber << ","
       << product.productname << ","
       << product.producttype << ","
       << product.productsize << ","
       << product.productprize << ","
       << product.productquantity;
    return os;
}

istream& operator>>(istream& is, Product& product) {
    string line;
    if (getline(is, line)) {
        stringstream ss(line);
        string token;

        getline(ss, token, ',');
        product.productnumber = stoi(token);
        getline(ss, product.productname, ',');
        getline(ss, product.producttype, ',');
        getline(ss, product.productsize, ',');
        getline(ss, token, ',');
        product.productprize = stoi(token);
        getline(ss, token, ',');
        product.productquantity = stoi(token);
    }
    return is;
}

void ShowMenu(); // Forward declaration

void ShowMenu() {
    int choice;
    cout << "\n------ Tortilla WoodShop ------\n"
         << "1 - Add New Product\n"
         << "2 - Search Stock\n"
         << "3 - Update Stock\n"
         << "4 - Display All Products\n"
         << "5 - Calculate Inventory Value\n"
         << "6 - Delete Product\n"
         << "7 - Show Deleted Products\n"
         << "8 - Restore Deleted Product\n"
         << "9 - Exit\n"
         << "Enter your choice: ";

    cin >> choice;

    if (cin.fail()) {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Invalid input. Please enter a number.\n";
        ShowMenu(); // recursive retry
        return;
    }

    switch (choice) {
        case 1: AddNewProduct(); break;
        case 2: SearchStock(); break;
        case 3: UpdateStock(); break;
        case 4: DisplayAllProduct(); break;
        case 5: CalculateInventoryValue(); break;
        case 6: DeleteProduct(); break;
        case 7: DisplayDeletedProducts(); break;
        case 8: RestoreDeletedProduct(); break;
        case 9:
            saveInventoryToFile("inventory.txt");
            CleanUp();
            cout << "Exiting program. Goodbye!\n";
            return;
        default:
            cout << "Invalid choice. Please enter 1-9.\n";
    }

    ShowMenu(); // Recur again
}

int main() {
    loadInventoryFromFile("inventory.txt");
    ShowMenu(); // Start recursive menu
    return 0;
}
